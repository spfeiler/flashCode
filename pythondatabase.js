let pythonflashcards =

    [
    {"Term": "Comment (#)", "Definition": "used for the purpose of in-code documentation"},
    {"Term": "Create a Variable", "Definition": "Python has no command for declaring a variable. A variable is created the moment you first assign a value to it using an equal sign.", "Example": "name = John"},
    {"Term": "Variable Name Rules", "Definition": "Must start with a letter or the underscore character, can't start with a number, can only contain alpha-numeric characters and underscores, are case-sensitive"},
    {"Term": "Output Variables", "Definition": "The Python print statement is often used to output variables. To combine both text and a variable, Python uses the + character", "Example": "Print('Text here' + variableName)"},
    {"Term": "Int", "Definition": "Int, or integer, is a whole number, positive or negative, without decimals, of unlimited length", "Example":"1, -75, 674876"},
    {"Term": "Float", "Definition": "Float, or 'floating point number' is a number, positive or negative, containing one or more decimals", "Example": "1.5, -3.7"},
    {"Term": "Complex Number", "Definition": "Complex numbers are written with a 'j' as the imaginary part", "Example":"7j, -7j"},
    {"Term": "String", "Definition": "String literals in python are surrounded by either single quotation marks, or double quotation marks.Strings can be output to screen using the print function", "Example": "Print('Hello World')"},
    {"Term": "Input()", "Definition": "Can be used with a string to ask a user for input"},
    {"Term": "Addition Operator", "Definition": "(+) used to add two numbers together", "Example": "1 + 2 = 3"},
    {"Term": "Subtraction Operatior", "Definition": "(-) used to subract a number from another", "Example": "3 - 2 = 1"},
    {"Term": "Multiplication Operator", "Definition": "(*) used to multiply two numbers", "Example": "3 * 2 = 6"},
    {"Term": "Division Operator", "Definition": "(/) used to divide a number by another", "Example": "6 / 2 = 3"},
    {"Term": "Modulus Operator", "Definition": "(%) returns the remainder after division is completed", "Example": "7 % 2 = 1"},
    {"Term": "Equal", "Definition": " (==) Comparison operator used when two Term have the same value", "Example": "3 == 3 , x == y"},
    {"Term": "Not equal", "Definition": "(!=) Comparison operator used when two Term do not have the same value", "Example": "3 != 2 , x != y"},
    {"Term": ">", "Definition": "Greater-than comparison operator that says one value is greater than another", "Example": "3 > 2 , x > y"},
    {"Term": "<", "Definition": "Less-than comparison operator that says one value is less than the other", "Example": "1 < 3 , x < y"},
    {"Term": ">=", "Definition": "Greater-then or Equal-to operator says one value is greater than OR equal-to another", "Example": "10 >= 3, 3 >= 3"},
    {"Term": "<=", "Definition": "Less-than or Equal-to operator says one value is less than OR equal to the other", "Example": "3 <= 10 , 3 <= 3"},
    {"Term": "Logical Operators", "Definition": "Logical operators are used to combine conditional statements"},
    {"Term": "and", "Definition": "Logical operator that returns True if both statements are true", "Example": "x < 5 and x < 10"},
    {"Term": "or", "Definition": "Logical operator that returns True if one of the statements is true", "Example": "x < 5 or x < 4"},
    {"Term": "not", "Definition": "Logical operator that reverses the result. Returns False if the result is true", "Example": "not(x < 5 and x < 10)"},
    {"Term": "Identity Operators", "Definition": "used to compare the objects, not if they are equal, but if they are actually the same object, with the same memory location"},
    {"Term": "is", "Definition": "Identity operator that returns true if both variables are the same object", "Example": "x is y = True"},
    {"Term": "is not", "Definition": "Identity operator that returns true if both variables are not the same object", "Example": "x is not y = True"},
    {"Term": "Membership Operators", "Definition": "test if a sequence is presented in an object"},
    {"Term": "in", "Definition": "Membership operator that returns True if a sequence with the specified value is present in the object"},
    {"Term": "not in", "Definition": "Membership operator that returns True if a sequence with the specified value is not present in the object"},
    {"Term": "List", "Definition": "a collection which is ordered and changeable. In Python lists are written with square brackets", "Example": "thislist = ['apple', 'banana', 'cherry']"},
    {"Term": "Loop Through a List", "Definition": "You can loop through each list item by using a for loop", "Example": "for x in thislist:"},
    {"Term": "Check if Item Exists in List", "Definition": "use the in keyword", "Example": "if 'apple' in thislist: return True"},
    {"Term": "len()", "Definition": "Used to determine how many items a list has", "Example": "print(len(thislist))"},
    {"Term": "append()", "Definition": "used to add an item to the end of the list", "Example": "thislist.append('orange')"},
    {"Term": "insert()", "Definition": "used to add an item at the specified index", "Example": "thislist.insert(1, 'orange')"},
    {"Term": "remove()", "Definition": "Removes the item with the specified value", "Example": "thislist.remove('banana')"},
    {"Term": "pop()", "Definition": "removes the specified index, (or the last item if index is not specified)", "Example": "thislist.pop()"},
    {"Term": "del", "Definition": "removes the specified index or a complete list", "Example": "del thislist[0] or del thislist"},
    {"Term": "clear()", "Definition": "Removes all the elements from the list but empty list itself still remains", "Example": "thislist.clear()"},
    {"Term": "list()", "Definition": "Used to make a new list", "Example": "thislist = list(('apple', 'banana', 'cherry'))"},
    {"Term": "reverse()", "Definition": "Reverses the order of the list", "Example": "thislist.reverse()"},
    {"Term": "sort()", "Definition": "Sorts the list alphabetically", "Example": "thislist.sort()"},
    {"Term": "Elif", "Definition": "Used in If statements: if the previous conditions were not true, then try this condition"},
    {"Term": "Else", "Definition": "Used in If statements to catch anything which isn't caught by the preceding conditions"},
    {"Term": "And", "Definition": "a logical operator used to combine conditional statements", "Example": "if a > b and c > a: print('True')"},
    {"Term": "While ", "Definition": "can execute a set of statements as long as a condition is true", "Example": "while i < 6: print(i)"},
    {"Term": "Break", "Definition": "used in While loop, can stop the loop even if the while condition is true"},
    {"Term": "Continue", "Definition": "used in While loop, can stop the current iteration, and continue with the next"},
    {"Term": "For", "Definition": "loop is used for iterating (execute a set of statements, once for each item in a list) over a sequence (that is either a list, a tuple, a dictionary, a set, or a string)"},
    {"Term": "Range", "Definition": "loops through a set of code starting from 0 by default, incrementing by 1 (by default), and ending at a specified number.", "Example": "for x in range(2, 6): Print(x)"},
    {"Term": "Nested Loop", "Definition": "A nested loop is a loop inside a loop. The 'inner loop' will be executed one time for each iteration of the 'outer loop'"},
    {"Term": "Function", "Definition": "A function is a block of code which only runs when it is called. You can pass data, known as parameters, into a function. It can return data as a result."},
    {"Term": "Parameters", "Definition": "Information can be passed to functions as parameter. Parameters are specified after the function name, inside the parentheses. You can add as many parameters as you want, just separate them with a comma."}
    ]
